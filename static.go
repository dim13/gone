// Code generated by "esc -ignore '.*\.swp' -o static.go static/"; DO NOT EDIT.

package main

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/static/app.js": {
		local:   "static/app.js",
		size:    192,
		modtime: 1506867942,
		compressed: `
H4sIAAAAAAAC/zSNwUrFMBBF185XDFklIPmB8DbCA4Xn6vkDQ3IthXQi6aQi0n+XVt3dezhw3odmm5ty
rpDuA3/TQ21Z6t1alwnxjyfaE9EmnVfrkIUvrPjk6wa1exs9wzscZ3UhEf1KUUo5jdu8GhTdu/FRxOAe
+T/scTZLy2OBWpxg14pjPn29FO+KmLgQZ1X057fXG18Y8YCJ9pDoJwAA//+0wlwIwAAAAA==
`,
	},

	"/static/gone.tmpl": {
		local:   "static/gone.tmpl",
		size:    1880,
		modtime: 1506872121,
		compressed: `
H4sIAAAAAAAC/5RVTY/bNhA9S7+C1SJxC0SW7QZpoNDqIS2KXtoi3Utzo8SRSSxFuuQ4sS3ovxckJdle
eNH2JGG+3sx7Q7LvObRSA8lQooJsGH4xGsij7IA8WtY8gSV9L1uy/Hw+D0PfI3R7xRBI5rQxZ5/R96D5
/EnTS8055PP5/FqAUnL/4V4YngJ0mlAl9RMRFtrtQiDuy6JojUa33BmzU8D20i0b0xWNcz+2rJPqtP1k
aoOm/H61eu0OtQPcKoZSv2lOViolmwWxoLaLgOEEAC4InvawXSAc0RdaVGlCg7tKk6Q2/ET6NEkSD5xH
kJIsIsziDXFMu9yBle0HH9Uxu5O6JJtX5N0rbxnSJGFOchirKMOwJFbuBE7uh9oco7c2loMtCQqpiTNK
cvLwdvOevd2E4jVrnnbWHDQvyQO0bQsRdM84l3pXkjV0V13kClqcjR5paaExlrtSo8gbIRX/Fr6A/m5E
vy0PY/nrRIL8KnczJn6VHEVJ1qvVPPISDTJ1PVWOZn8zWa1Y8zRTFEO9CDn3WAyl0SXRRkMYqTHK2JI8
vGt+WDcwpR1GCCUd5kG03Kt5yYvNe7avAJiSO30lwjzABo5TEvKYMHO7IuvZS4txQe5sbxA7bm/49VtE
HTR+HiL5NqvNMQtGZHVcsqTvLdM7IMuPijkHzmf7ABu8CUVeURbPQVb0fQwbhqy6/NOCVbRAPmeQxju2
WZgyRP65B40+coyixQgwTfEyZlY9ej1fBIlqX6BC9D2om/p3r49/GeJXruBOYVrMbNJiZNsf5GLU4I5Q
jdEIGqNUl+y5UVEFammBYrb8xjq4MQROJ8vUzCznp3hqArUU7TxNNGdjlf8pbmRu6Vu5JuI/KH7pb9R7
Zu0OPdaYwA395qffPz7+9cfPRGCnqpTGT0IFsFg1PBU3YsbHgywDdPD6uA6QkUYw62/l7IBt/j6L7XyV
KDxbrQUnhiFG+gs/h78P8otnLLgyMoq2zfx00BjNR6qmDb7ZqctDUsRu04T6Gz20I9Yv9izW1bNS8VR7
7zPHtEXRRYtYnhaRpamvfwIAAP//9nYSWlgHAAA=
`,
	},

	"/static/index.html": {
		local:   "static/index.html",
		size:    227,
		modtime: 1506866498,
		compressed: `
H4sIAAAAAAAC/1SPMY/CMAyF5/ZX5Lxfs97gZDkQIwwsjCF1lZa0jWKD6L9Hbbow+fPzs/WMP4fz//V2
OaogY7Q1llJhINfauqpQeolkT/NEqAuv6kjilA8uM4mBp3S/f7AN2Oc+ieLsDbiUmoFByZLIgNBb9OBe
rljAoi607cV+eqiQqTPAskRqPDOoTHHvORDJ16nVsCbVe1S8z+2yCQVQl18+AQAA//+p+hyJ4wAAAA==
`,
	},

	"/static/style.css": {
		local:   "static/style.css",
		size:    463,
		modtime: 1506866260,
		compressed: `
H4sIAAAAAAAC/1RQXWrjMBB+tk4xYEJ2YRViE7JFvkVvIEsjW0TRBGnSxpTcvUhtneZ15vsfyS7wIRpH
kaXTZx8WBdtXGolp+w+yjllmTN4NojnrNPmooN/AcTOIu9DZW6zsQJoVJD/NXB7tSLdyHylZTAp49hEy
BW+hPfQv+tAPohm1OU2JrtEqaNE5h8Xkoq31cVLQ4Xn1lAEdf5/uYpfQULJZRZ6lmX2wf/AN49/q+CyK
VfRBAba/WH2lvHvLs4Juv6+ldkyswyO9ZLo8NRiDNqdav4AYbyxtUdfsKSqIFHEQjaFASUF7NP87gwV+
raLBZ5aZl4CSlwv+4EvEst4qqYOf4jrpGrLHWwGzLcB1qz10X/fPAAAA//8Sc7FtzwEAAA==
`,
	},

	"/": {
		isDir: true,
		local: "",
	},

	"/static": {
		isDir: true,
		local: "static",
	},
}
