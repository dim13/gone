// Code generated by "esc -ignore '^\..*' -o static.go static/"; DO NOT EDIT.

package main

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/static/app.js": {
		local:   "static/app.js",
		size:    1553,
		modtime: 1507066801,
		compressed: `
H4sIAAAAAAAC/6RUbU/bPBT93PyK+1h6wBkQAkJoW1UmBkhj4kVa9wfc+JZEc+zKdiho6n+fru2mL3Ta
pEn5YPsc35dzrjPtdOUbo0F2VtCCa5fDz2zwLCy8wAjuha+LqTLGcu2OT/BDPoyggxG8wP9wXg6zwRbz
5fi8XPLav+TViXd6lg7kNvf0jLgWfWc1cC7hAsocPoGEA2CSwUdgLIcD4LxeQjVB9TrULqGWoHYFOdo7
NswWwyzrZelmUnjkUnjRy+KtqH5Q+1/Hjw/FTFiHXJlKqLE3Vjxh8YT+1mPLWWSynOpupsCXN0egO6VC
wEEfTeMcLq0Vr5zoi5SrRg0juBYeC23mPIcj4O/fnZf0nZRlkK8PERfFtFEeLV82wRuPbUyWxAvhYuGE
FWNEncNFyEa5e48xZJ8K5bDPU7Ritis2NRiiXSnhQpOkWtrt7UHAHkSLPUSbeHeQMnnbUaLBIJAvK988
Ixwketyu4HG8EzBaE7JI1VMx/7nQ1krkYta5OnoZFU7Hzli/6kgcwmRDrWVmOILJqoiQZsN2t2X7YRwQ
522jn5rpa7I/X5vieDLMFmsjJxs3U6Jn91MnJtSsqboWtacZu1FIy8+vt5IzLyYKWZgGMSkardF++X5/
ByNg7I/WUXxr5mRAuOzQ+m9mzsN0DayZp7MrVIqX+Ub4leU7uCc7uOT6DurpJrX/H61NQp5k33ihlUJh
kwU8tLNhSoB5utSrJ6S8eUbt7xrnUaPl+9eP91dGezozQqLcP4ReqH98+VuGDjPqIQvvy1sUbXr7oaCx
6WyFnCFtHPmZRdLbkhmNN1srE9/WmX5fa+ViEeb/t3X9CgAA//+X/QknEQYAAA==
`,
	},

	"/static/index.html": {
		local:   "static/index.html",
		size:    306,
		modtime: 1507040327,
		compressed: `
H4sIAAAAAAAC/1SQsVIDIRCG68tT4FZaGFqLhSY6ljqjjeUetxEScjCwcby3d4A0VnwLHz/L4t3z2+Hz
6/1FeblEu8OxTOiZFrubJpQgke1rWhn14LZ7YSHlPJXKYuAqx8cn6AcxrGflCx8NVNki712toArHW109
s4CSLbMB4V/RTehXqyshi6rFGaCc96f6zzvRDw0FLOpBrVN9axXntGw9aL6KpFWl1cXgzgZcZCofkgp9
8/0D2EOrUQ9tfJLmyCosBjq1Bzr0/JGLeozmLwAA//9vbLJQMgEAAA==
`,
	},

	"/static/style.css": {
		local:   "static/style.css",
		size:    529,
		modtime: 1507040657,
		compressed: `
H4sIAAAAAAAC/3yQQW+rMBCEz/hXrIQivXdwFHhRXmV+zYIXsLLxRmbTBFX57xVuS5NDe0IaZr5ZTyt+
hjdT9BLV9ngKPDuYME52ohT6xhQnTEOIDuoNHDaNuRucgqecYUF1kMIw6vKjbOW26K0kT8mBjiHCJBw8
lPv6Bfd1Y4oWu+OQ5BK9g5L6vqel5Izehzg4qOi0dlqmXj+luykVWybQ5KKOthsD+z/0SvFvrnymUqY+
ZED9Q6zOmWvwOjqodrtNY4qrJG/bRHh0kD8WmX9h/MsMpZta5DDEhx22Kor8vYRVOT+t0TJ2xzzlyvDU
SUINEh1EidSYohOW5KA8dP+rjhb7JUM5TGonnZmszmf68t/NNl/ww1nrc2u6LWb1i3HdfQfVh/4eAAD/
/xh+ajURAgAA
`,
	},

	"/": {
		isDir: true,
		local: "",
	},

	"/static": {
		isDir: true,
		local: "static",
	},
}
