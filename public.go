// Code generated by "esc -ignore '^\..*' -o public.go public/"; DO NOT EDIT.

package main

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/public/app.js": {
		local:   "public/app.js",
		size:    2373,
		modtime: 1512773439,
		compressed: `
H4sIAAAAAAAC/6xV7W7cNhD8LT3FlkAdqj4rOiMw0ByUIHUMpIU/gFxegBb3IsESKZCUzofC717wQzpZ
VR0DzZ/DkTPcnd0dkbtOFKaSAninmP1DhU7g7zjqmYJHyOGGmTLd1VIqKvTbNf6ebDyoIYdH+BUusk0c
zZiPby+ygde8klcG3vm7sMHn3PN3lqvQdEoApRw+QJbAR+BwCoQTeA+EJHAKlJYDVFqonELNADUWao6Q
tmtNNvFTHI9dUdjIHu9qTo1ixYNeQTl2x0AOn5nBVMg9TeAMaAm/wUU2/KyzLJsI9gHSXVUbVHTIQCuD
jQs58FzIlimNDku3iCKBD2A2cfSUPJfXtZwZHLVxZtgoTyMKyGHHao2bOArpG9Yu5a524LNd1kxryHMX
K6xOTsBht6zBEbILfzYKmYzqbKIocuRPhal6hNNA98sjvPVnHGb/W+TJF+jE/KJd2TZ+UN52uqSuQtuI
sSAtlTlWxFZw/6yb94OQM5iImPdRYVuzAinW2KAwKyikMCiMC7UvqxphwNKS6cuyqvmt5Khp4rMNoPeL
w8cDNdPG7QThwz5rWxTcc4d8c1mFVFyH+R6Nx+5rtM2TReciFQqZwSsflxKHk/G7Qma/JLcZmN++IOM0
SSuhUZmvck+dUS0z7F1iXdPMMgSqL99uriEH4txAFojrGdF6Y4l3PuNtWxSG/NCctgol92MRR9lna6s7
UnL/gu6jrxe46wWulb9AnakfL8yJ3ZPgrWgw1Dii72jCfP44/MkpCaMlycoXNZt8YeXi/5y8kYbVkEM2
uYkF7uGGtTR5Vdd7yKGx2ieXg+u4BXr4CD28d+GjJtXPWCvo4RRmrYm8otN8Cgwta9KdVFesKI9ielZ3
uIIHPPwUIzzg4ccOGMfqko8DHfv59YX8A+Glj+hkW31v2IZMHrmlYy4eTyuLE0cgfmNJqsNfZbvgq/+y
Ha90W7PD1HazO2gTRzNvugjuwTEK2eCxqx6F2cpOFUgJ2oW2vnRtdOcC75NS7GDdGPvjKePcnb2utEGB
ihL7EpAVjK7wz87s6ftre3cbXk1M3SvhGvi8nk1sZxmP3flXrjef724u/VV8LRlH/maS16VdjPhPAAAA
//8HUe0kRQkAAA==
`,
	},

	"/public/favicon.ico": {
		local:   "public/favicon.ico",
		size:    1150,
		modtime: 1507474974,
		compressed: `
H4sIAAAAAAAC/7RTS6txURh+ldk30Tc4Y8Pz085PMFD+iDIgY6VkoEQSkeSaexQi93K/PKdnae32djA5
nae0XuvyPpe1tohNbOJwcHTKl13kQ0Q+RcQhIk65zyvYRf7/u/808Aa3280Ydf1XMHMR+/0e8/kc2+0W
4/FY1ZfLBcfjEdfr9el5s87JZAKv14t2u41+v49er4d4PI5QKPTyvHmsVCrodruWOWrJZrOqt3le17vd
TtWDwQA+n89YI5/mpP5yuWzhPhwO2Gw2WK/XyiNRr9eRz+cxGo2M/roHdXG/xmq1Upqm06nKif2KxaLy
3Wq1ftwh9y4Wi5cZMLNGo2Fo12e1NmrSGTzLvlAoKJ+Pa+zFDFOpFJLJpOU8e3Ok9k6nY/FWKpUwHA4R
i8XgcrkQiURQq9Usmqknk8moXHRm5NP7AoEAPB4PgsEgwuGwsU7QK3M6nU5qjrnPZjO1Rl5qdrvdSKfT
iEaj8Pv9Fv+8t+VyaeipVqvI5XJoNpvqHdEvPSQSCfUGWZPrVf5a1/l8Vn14j/REHvNbeszf/P/dN6Lv
lJBf4jsAAP//eo1wxn4EAAA=
`,
	},

	"/public/index.html": {
		local:   "public/index.html",
		size:    410,
		modtime: 1512773397,
		compressed: `
H4sIAAAAAAAC/1yRMXPDIAyFZ+dXUPaYtQP20vY6tkOXjgrItVIMPqT67H/fMzhDMiGJ9z2eDvv0+vHy
9f35pkaZQn+y9WjsiOD7U9NYIQnYv6eI1tR6n04ooNwImVE6/SfD+VmXi0DxV2UMnWbZAvKIKFqNGYdj
0jpmrWSbsdOCq5i9f0DJpXiDBlj2tiWXbhhN8INmPRdZQdllmkVxdp2GeW6v909cYYEq0b01tdqXNMeW
9pL8VoyAyaMi3+lLWot3Yz0tZeICMCPvFp6WIjdFXyOgE0qxKlMUjPLAZ3Qp+3v+oEqYGsKa+gX/AQAA
//9rTNV1mgEAAA==
`,
	},

	"/public/style.css": {
		local:   "public/style.css",
		size:    567,
		modtime: 1507474970,
		compressed: `
H4sIAAAAAAAC/3SQ38rbMAzFr+OnEITybTBDk5VuOC+w11BsJTFV7GKrf7LRdx8xXddCvyuBdPQ7h9NH
t8AfVQ0xiB5w9rwY+PhFfCbxFj++QcaQdabkh+4uy/43GcgzMlPqVDVjGn0w0G5gv+nUTWH2jgqVI4qB
5MdJ1kPdx+u672NylAzI5APkyN5BvWt/4q7tVNWjPYwpnoIzUNMwDLQ6H9E5H0YDDc0PT800yH11U3Ui
G5PLIMkEmbSdPLsvdKbwtZi+cqlwn7/c01dbXi7eyWSg2W43naouMTndJ8KDgTI0Mn+O+F4QQlfRyH4M
zz1IFOT/TWiJx5c2ekZ7KErLmDO9TfcWjY+LW0Oh+BgMhBioU5WNHJOBem9/NJZW+amkYJ9FZ1mYtCxH
+qe/KXHr+dH9Fhq6rvu/AQAA//8X8r0qNwIAAA==
`,
	},

	"/": {
		isDir: true,
		local: "",
	},

	"/public": {
		isDir: true,
		local: "public",
	},
}
